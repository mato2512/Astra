================================================================================
ASTRA AI - COMPLETE DIGITAL OCEAN DEPLOYMENT GUIDE
================================================================================
Created: October 18, 2025
Application: Astra AI (SvelteKit + FastAPI)
Repository: https://github.com/mato2512/Astra.git

================================================================================
TABLE OF CONTENTS
================================================================================
1. Create Digital Ocean Droplet
2. Initial Server Setup
3. Install Docker & Docker Compose
4. Clone Repository & Configure Environment
5. Build & Deploy Application
6. Setup Nginx Reverse Proxy
7. Setup SSL Certificate (HTTPS)
8. Verify Deployment
9. Update Application (Future Updates)
10. Troubleshooting
11. Maintenance Commands

================================================================================
SECTION 1: CREATE DIGITAL OCEAN DROPLET
================================================================================

1.1 Login to Digital Ocean
   - Go to: https://cloud.digitalocean.com
   - Login with your account

1.2 Create New Droplet
   - Click: "Create" > "Droplets"
   - Choose Region: Bangalore (BLR1) or closest to you
   - Choose Image: Ubuntu 24.04 (LTS) x64
   - Choose Size: 
     * Minimum: 2 GB RAM / 1 vCPU / 50 GB Disk
     * Recommended: 4 GB RAM / 2 vCPU / 80 GB Disk (for better performance)
   - Authentication: SSH keys (recommended) or Password
   - Hostname: astra-web-server (or your choice)
   - Click: "Create Droplet"

1.3 Note Down Details
   - Droplet IP Address: e.g., 139.59.92.206
   - Root Password: (if using password auth)
   - SSH Key: (if using key auth)

1.4 Configure DNS (if using domain)
   - Go to your domain registrar (e.g., GoDaddy, Namecheap)
   - Add A Record:
     * Name: astra (or @ for root domain)
     * Type: A
     * Value: [Your Droplet IP]
     * TTL: Automatic or 600
   - Example: astra.ngts.tech â†’ 139.59.92.206
   - Wait 5-30 minutes for DNS propagation

================================================================================
SECTION 2: INITIAL SERVER SETUP
================================================================================

2.1 Connect to Droplet via SSH
   
   Windows (PowerShell):
   ssh root@YOUR_DROPLET_IP
   
   Example:
   ssh root@139.59.92.206

2.2 Update System Packages
   
   apt update
   apt upgrade -y

2.3 Setup Firewall (UFW)
   
   # Enable firewall
   ufw enable
   
   # Allow SSH (port 22)
   ufw allow 22/tcp
   
   # Allow HTTP (port 80)
   ufw allow 80/tcp
   
   # Allow HTTPS (port 443)
   ufw allow 443/tcp
   
   # Check status
   ufw status

2.4 Create Swap Space (Important for 2GB droplet)
   
   # Create 4GB swap file
   fallocate -l 4G /swapfile
   
   # Set permissions
   chmod 600 /swapfile
   
   # Make swap
   mkswap /swapfile
   
   # Enable swap
   swapon /swapfile
   
   # Make permanent (add to fstab)
   echo '/swapfile none swap sw 0 0' >> /etc/fstab
   
   # Optimize swap settings
   echo 'vm.swappiness=10' >> /etc/sysctl.conf
   echo 'vm.vfs_cache_pressure=50' >> /etc/sysctl.conf
   sysctl -p
   
   # Verify swap
   free -h

================================================================================
SECTION 3: INSTALL DOCKER & DOCKER COMPOSE
================================================================================

3.1 Install Docker
   
   # Install prerequisites
   apt install -y ca-certificates curl gnupg lsb-release
   
   # Add Docker GPG key
   mkdir -p /etc/apt/keyrings
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
   
   # Add Docker repository
   echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
   
   # Update package list
   apt update
   
   # Install Docker
   apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
   
   # Start Docker service
   systemctl start docker
   systemctl enable docker
   
   # Verify installation
   docker --version
   docker compose version

3.2 Enable Docker BuildKit (for faster builds)
   
   export DOCKER_BUILDKIT=1
   echo 'export DOCKER_BUILDKIT=1' >> ~/.bashrc

================================================================================
SECTION 4: CLONE REPOSITORY & CONFIGURE ENVIRONMENT
================================================================================

4.1 Create Application Directory
   
   mkdir -p /opt/astra
   cd /opt/astra

4.2 Clone Repository
   
   # Install git if not present
   apt install -y git
   
   # Clone the repository
   git clone https://github.com/mato2512/Astra.git .
   
   # Verify files
   ls -la

4.3 Create Environment File (.env)
   
   # Create .env file
   nano .env
   
   # Paste the following configuration:
   # ================================================
   # CRITICAL: Replace YOUR_SECRET_KEY with actual key
   WEBUI_SECRET_KEY=YOUR_SECRET_KEY_HERE
   
   # Application Settings
   WEBUI_NAME=Astra
   ENV=prod
   PORT=3000
   
   # Ollama Configuration
   OLLAMA_BASE_URL=http://host.docker.internal:11434
   
   # User Registration
   ENABLE_SIGNUP=true
   DEFAULT_USER_ROLE=user
   
   # Security
   CORS_ALLOW_ORIGIN=*
   
   # Optional: Custom Models
   # TASK_MODEL=astra
   # IMAGE_GENERATION_MODEL=astra-sd-xl
   # AUDIO_STT_ENGINE=whisper
   # AUDIO_TTS_ENGINE=openai
   # ================================================
   
   # Save and exit: Ctrl+X, then Y, then Enter

4.4 Generate Secret Key (if needed)
   
   # Generate a secure random key
   openssl rand -hex 32
   
   # Copy the output and paste into .env as WEBUI_SECRET_KEY

================================================================================
SECTION 5: BUILD & DEPLOY APPLICATION
================================================================================

5.1 Build Docker Image (First Time - Takes 15-20 minutes)
   
   cd /opt/astra
   
   # Clean any previous builds
   docker system prune -af
   
   # Build with no cache
   docker compose -f docker-compose.prod.yaml build --no-cache
   
   # This will:
   # - Install 311 Python packages (torch, transformers, chromadb, etc.)
   # - Install 1,192 npm packages
   # - Build SvelteKit frontend
   # - Download 10 Pyodide packages
   # - Create optimized Docker image

5.2 Start Application
   
   # Start in detached mode
   docker compose -f docker-compose.prod.yaml up -d
   
   # Check status
   docker compose ps
   
   # Should show:
   # NAME       STATUS
   # astra-ai   Up (healthy)

5.3 View Logs
   
   # View all logs
   docker compose logs -f
   
   # View last 100 lines
   docker compose logs -f --tail=100
   
   # Exit logs: Ctrl+C

5.4 Test Application Locally
   
   # Test health endpoint
   curl http://localhost:3000/health
   # Should return: {"status":true}
   
   # Test HTML response
   curl http://localhost:3000
   # Should return HTML content with "Astra" in title

================================================================================
SECTION 6: SETUP NGINX REVERSE PROXY
================================================================================

6.1 Install Nginx
   
   apt install -y nginx
   
   # Check status
   systemctl status nginx

6.2 Create Nginx Configuration
   
   # Create config file
   nano /etc/nginx/sites-available/astra
   
   # Paste the following configuration:
   # ================================================
   server {
       listen 80;
       server_name YOUR_DOMAIN_HERE;
       
       client_max_body_size 100M;
       
       location / {
           proxy_pass http://localhost:3000;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection 'upgrade';
           proxy_set_header Host $host;
           proxy_cache_bypass $http_upgrade;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
       }
   }
   # ================================================
   
   # Replace YOUR_DOMAIN_HERE with your actual domain
   # Example: astra.ngts.tech
   
   # Save and exit: Ctrl+X, then Y, then Enter

6.3 Enable Site Configuration
   
   # Create symbolic link
   ln -s /etc/nginx/sites-available/astra /etc/nginx/sites-enabled/
   
   # Test configuration
   nginx -t
   # Should show: "syntax is ok" and "test is successful"
   
   # Reload Nginx
   systemctl reload nginx

6.4 Test Domain Access
   
   # Test from server
   curl http://YOUR_DOMAIN_HERE
   
   # Test from browser
   # Open: http://YOUR_DOMAIN_HERE
   # Should show Astra AI interface

================================================================================
SECTION 7: SETUP SSL CERTIFICATE (HTTPS)
================================================================================

7.1 Install Certbot
   
   apt install -y certbot python3-certbot-nginx

7.2 Obtain SSL Certificate
   
   # Run Certbot with Nginx plugin
   certbot --nginx -d YOUR_DOMAIN_HERE
   
   # Follow prompts:
   # - Enter email address (for renewal notifications)
   # - Agree to terms of service (Y)
   # - Share email with EFF (optional - Y or N)
   # - Choose redirect HTTP to HTTPS: 2 (recommended)

7.3 Test HTTPS
   
   # Test from server
   curl https://YOUR_DOMAIN_HERE/health
   # Should return: {"status":true}
   
   # Test from browser
   # Open: https://YOUR_DOMAIN_HERE
   # Should show Astra AI with SSL lock icon

7.4 Setup Auto-Renewal (Already configured by Certbot)
   
   # Test renewal process
   certbot renew --dry-run
   
   # Check renewal timer
   systemctl status certbot.timer
   
   # Certbot automatically renews certificates before expiration

================================================================================
SECTION 8: VERIFY DEPLOYMENT
================================================================================

8.1 Check All Services
   
   # Check Docker
   docker compose ps
   
   # Check Nginx
   systemctl status nginx
   
   # Check firewall
   ufw status
   
   # Check disk space
   df -h
   
   # Check memory
   free -h

8.2 Access Application
   
   # Open browser and go to:
   https://YOUR_DOMAIN_HERE
   
   # You should see:
   # - Astra AI splash screen
   # - Login/Signup page
   # - All custom Astra logos

8.3 Create First User
   
   # Click "Sign up"
   # Enter:
   # - Name: Your Name
   # - Email: your@email.com
   # - Password: (secure password)
   # - Confirm Password: (same password)
   # Click "Create Account"

8.4 Test Features
   
   # Test chat functionality
   # Test file upload
   # Test settings
   # Verify branding shows "Astra"

================================================================================
SECTION 9: UPDATE APPLICATION (FUTURE UPDATES)
================================================================================

9.1 Update from GitHub (When New Changes Available)
   
   cd /opt/astra
   
   # Pull latest changes
   git pull origin main

9.2 Quick Update (No Code Changes - Only Config/Logo)
   
   # Just restart container
   docker compose -f docker-compose.prod.yaml restart
   
   # Check logs
   docker compose logs -f --tail=50

9.3 Full Update (Code Changes - Requires Rebuild)
   
   # Stop containers
   docker compose -f docker-compose.prod.yaml down
   
   # Rebuild with cache (faster - 3-5 minutes)
   docker compose -f docker-compose.prod.yaml build
   
   # Start containers
   docker compose -f docker-compose.prod.yaml up -d
   
   # Check status
   docker compose ps

9.4 Clean Update (Major Changes - Full Rebuild)
   
   # Stop containers
   docker compose -f docker-compose.prod.yaml down
   
   # Clean Docker cache
   docker system prune -af
   
   # Rebuild without cache (slower - 15-20 minutes)
   docker compose -f docker-compose.prod.yaml build --no-cache
   
   # Start containers
   docker compose -f docker-compose.prod.yaml up -d

================================================================================
SECTION 10: TROUBLESHOOTING
================================================================================

10.1 Application Not Starting
   
   # Check container logs
   docker compose logs -f --tail=200
   
   # Check container status
   docker compose ps
   
   # Restart container
   docker compose restart

10.2 Port Already in Use
   
   # Check what's using port 3000
   lsof -i :3000
   
   # Kill process if needed
   kill -9 [PID]
   
   # Or change port in docker-compose.prod.yaml

10.3 Out of Memory During Build
   
   # Check memory
   free -h
   
   # Check swap
   swapon --show
   
   # If no swap, create 4GB swap (see Section 2.4)
   
   # Clean Docker to free space
   docker system prune -af

10.4 Domain Not Accessible
   
   # Check DNS resolution
   dig YOUR_DOMAIN_HERE +short
   # Should return your droplet IP
   
   # Check Nginx
   systemctl status nginx
   nginx -t
   
   # Check firewall
   ufw status
   
   # Test local access
   curl http://localhost:3000

10.5 SSL Certificate Issues
   
   # Check certificate
   certbot certificates
   
   # Renew certificate manually
   certbot renew
   
   # Test renewal
   certbot renew --dry-run

10.6 Database Issues
   
   # Database is stored in Docker volume
   # Location: /var/lib/docker/volumes/astra_astra-data
   
   # Backup database
   docker compose exec astra-ai tar czf /tmp/backup.tar.gz /app/backend/data
   docker compose cp astra-ai:/tmp/backup.tar.gz ./backup.tar.gz
   
   # Restore database
   docker compose cp ./backup.tar.gz astra-ai:/tmp/backup.tar.gz
   docker compose exec astra-ai tar xzf /tmp/backup.tar.gz -C /

================================================================================
SECTION 11: MAINTENANCE COMMANDS
================================================================================

11.1 View Logs
   
   # All logs
   docker compose logs -f
   
   # Last 100 lines
   docker compose logs -f --tail=100
   
   # Specific time range
   docker compose logs --since 1h
   
   # Nginx logs
   tail -f /var/log/nginx/access.log
   tail -f /var/log/nginx/error.log

11.2 Restart Services
   
   # Restart application
   docker compose restart
   
   # Restart Nginx
   systemctl restart nginx
   
   # Restart Docker daemon
   systemctl restart docker

11.3 Stop/Start Application
   
   # Stop
   docker compose -f docker-compose.prod.yaml down
   
   # Start
   docker compose -f docker-compose.prod.yaml up -d
   
   # Stop and remove volumes (CAUTION: Deletes data!)
   docker compose -f docker-compose.prod.yaml down -v

11.4 Backup Application
   
   # Backup code
   cd /opt
   tar czf astra-backup-$(date +%Y%m%d).tar.gz astra/
   
   # Backup database
   docker compose exec astra-ai tar czf /tmp/db-backup.tar.gz /app/backend/data
   docker compose cp astra-ai:/tmp/db-backup.tar.gz ./db-backup-$(date +%Y%m%d).tar.gz
   
   # Download backups to local machine
   # From local machine:
   scp root@YOUR_DROPLET_IP:/opt/astra-backup-*.tar.gz ./
   scp root@YOUR_DROPLET_IP:/opt/astra/db-backup-*.tar.gz ./

11.5 Monitor Resources
   
   # Check disk usage
   df -h
   
   # Check memory usage
   free -h
   
   # Check Docker disk usage
   docker system df
   
   # Check container resources
   docker stats
   
   # Clean unused Docker resources
   docker system prune -af

11.6 Check Application Health
   
   # Health endpoint
   curl http://localhost:3000/health
   
   # Container status
   docker compose ps
   
   # Container health logs
   docker inspect astra-ai | grep -A 10 Health

================================================================================
QUICK REFERENCE COMMANDS
================================================================================

# SSH to Droplet
ssh root@YOUR_DROPLET_IP

# Navigate to App
cd /opt/astra

# Update Code
git pull origin main

# Restart App
docker compose restart

# Rebuild App
docker compose build && docker compose up -d

# View Logs
docker compose logs -f --tail=100

# Check Status
docker compose ps

# Stop App
docker compose down

# Start App
docker compose up -d

# Check Health
curl http://localhost:3000/health

# Clean Docker
docker system prune -af

# Backup Database
docker compose exec astra-ai tar czf /tmp/backup.tar.gz /app/backend/data

================================================================================
IMPORTANT NOTES
================================================================================

1. SECRET KEY: Always use a strong, unique WEBUI_SECRET_KEY
   Generate with: openssl rand -hex 32

2. FIREWALL: Keep UFW enabled with only necessary ports open (22, 80, 443)

3. UPDATES: Regular system updates recommended
   Run: apt update && apt upgrade -y

4. BACKUPS: Backup database and .env file regularly

5. MONITORING: Check logs regularly for errors
   Run: docker compose logs -f

6. SECURITY: Change default SSH port if exposed to public
   Edit: /etc/ssh/sshd_config

7. DOMAIN: DNS propagation can take 5-30 minutes, sometimes up to 48 hours

8. CERTIFICATES: SSL certificates auto-renew every 60 days
   Verify: certbot renew --dry-run

9. RESOURCES: Monitor disk space and memory usage
   2GB RAM minimum, 4GB recommended for better performance

10. SUPPORT: Check GitHub issues for common problems
    https://github.com/mato2512/Astra/issues

================================================================================
SUPPORT & RESOURCES
================================================================================

GitHub Repository: https://github.com/mato2512/Astra
Docker Documentation: https://docs.docker.com
Nginx Documentation: https://nginx.org/en/docs
Let's Encrypt: https://letsencrypt.org
Digital Ocean Docs: https://docs.digitalocean.com

For issues or questions, open an issue on GitHub or check the documentation.

================================================================================
END OF GUIDE
================================================================================
Last Updated: October 18, 2025
Version: 1.0
